train$Continent[train$longitude > -80 & train$longitude < -35 & train$latitude > -55 & train$latitude < 12] <- 'South America'
train$Continent[train$longitude > -115 & train$longitude < -60 & train$latitude > 12 & train$latitude < 30] <- 'Middle America'
train$Continent[train$longitude > -125 & train$longitude < -53 & train$latitude > 30 & train$latitude < 80] <- 'North America'
train$Continent[train$longitude > -168 & train$longitude < -125 & train$latitude > 50 & train$latitude < 72] <- 'South America'
train$Continent[train$longitude >  113 & train$longitude < 168 & train$latitude > -48 & train$latitude < -12] <- 'Australia'
train$Continent[train$longitude > -10 & train$longitude < 40 & train$latitude > 36 & train$latitude < 72] <- 'Europe'
train$Continent[train$longitude > -18 & train$longitude < 35 & train$latitude > 5 & train$latitude < 36] <- 'Africa'
train$Continent[train$longitude > 50 & train$longitude < 10 & train$latitude > -35 & train$latitude < 5] <- 'Africa'
train$Continent[train$longitude > 35 & train$longitude < -50 & train$latitude > 13 & train$latitude < 0] <- 'Africa'
train$Continent[train$longitude > 40 & train$longitude < 145 & train$latitude > 30 & train$latitude < 85] <- 'Asia'
train$Continent[train$longitude > 35 & train$longitude < 125 & train$latitude > 10 & train$latitude < 40] <- 'Asia'
train$Continent[train$longitude > 30 & train$longitude < 85 & train$latitude > -10 & train$latitude < 20] <- 'Asia'
train$Continent[train$longitude > 140 & train$longitude < 180 & train$latitude > 50 & train$latitude < 75] <- 'Asia'
test$Continent <- 'Ocean'
# Ilość dobrych i złych zdjęć
test$Continent[test$longitude > -80 & test$longitude < -35 & test$latitude > -55 & test$latitude < 12] <- 'South America'
test$Continent[test$longitude > -115 & test$longitude < -60 & test$latitude > 12 & test$latitude < 30] <- 'Middle America'
test$Continent[test$longitude > -168 & test$longitude < -125 & test$latitude > 50 & test$latitude < 72] <- 'South America'
test$Continent[test$longitude > -125 & test$longitude < -53 & test$latitude > 30 & test$latitude < 80] <- 'North America'
test$Continent[test$longitude >  113 & test$longitude < 168 & test$latitude > -48 & test$latitude < -12] <- 'Australia'
test$Continent[test$longitude > -10 & test$longitude < 40 & test$latitude > 36 & test$latitude < 72] <- 'Europe'
test$Continent[test$longitude > -18 & test$longitude < 35 & test$latitude > 5 & test$latitude < 36] <- 'Africa'
test$Continent[test$longitude > 50 & test$longitude < 10 & test$latitude > -35 & test$latitude < 5] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < -50 & test$latitude > 13 & test$latitude < 0] <- 'Africa'
test$Continent[test$longitude > 40 & test$longitude < 145 & test$latitude > 30 & test$latitude < 85] <- 'Asia'
test$Continent[test$longitude > 30 & test$longitude < 85 & test$latitude > -10 & test$latitude < 20] <- 'Asia'
test$Continent[test$longitude > 140 & test$longitude < 180 & test$latitude > 50 & test$latitude < 75] <- 'Asia'
train$Continent <- factor(train$Continent)
test$Continent <- factor(test$Continent)
train$width[train$width == 0] <- as.integer(1)
# Pozbycie się niewygodnych zer
train$height[train$height == 0] <- as.integer(1)
# Własna kolumna - proporcjie
train$proportions[(train$width / train$height) < 1.33] <- '< 4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) >= 1.33] <- '4:3'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
prop.table(table(test$proportions))
train$resolution <- 0
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
# UserInput - wykorzystywany przy własnych danych.
userInput = data.frame(matrix(NA, nrow = 1, ncol = 13))
dim(userInput)
userInput$Continent <- 'Ocean'
userInput$Continent[userInput$longitude > -80 & userInput$longitude < -35 & userInput$latitude > -55 & userInput$latitude < 12] <- 'South America'
userInput$Continent[userInput$longitude > -115 & userInput$longitude < -60 & userInput$latitude > 12 & userInput$latitude < 30] <- 'Middle America'
userInput$Continent[userInput$longitude > -125 & userInput$longitude < -53 & userInput$latitude > 30 & userInput$latitude < 80] <- 'North America'
userInput$Continent[userInput$longitude > -168 & userInput$longitude < -125 & userInput$latitude > 50 & userInput$latitude < 72] <- 'South America'
userInput$Continent[userInput$longitude >  113 & userInput$longitude < 168 & userInput$latitude > -48 & userInput$latitude < -12] <- 'Australia'
userInput$Continent[userInput$longitude > -10 & userInput$longitude < 40 & userInput$latitude > 36 & userInput$latitude < 72] <- 'Europe'
userInput$Continent[userInput$longitude > -18 & userInput$longitude < 35 & userInput$latitude > 5 & userInput$latitude < 36] <- 'Africa'
userInput$Continent[userInput$longitude > 50 & userInput$longitude < 10 & userInput$latitude > -35 & userInput$latitude < 5] <- 'Africa'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < -50 & userInput$latitude > 13 & userInput$latitude < 0] <- 'Africa'
userInput$Continent[userInput$longitude > 40 & userInput$longitude < 145 & userInput$latitude > 30 & userInput$latitude < 85] <- 'Asia'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < 125 & userInput$latitude > 10 & userInput$latitude < 40] <- 'Asia'
userInput$Continent[userInput$longitude > 30 & userInput$longitude < 85 & userInput$latitude > -10 & userInput$latitude < 20] <- 'Asia'
userInput$Continent[userInput$longitude > 140 & userInput$longitude < 180 & userInput$latitude > 50 & userInput$latitude < 75] <- 'Asia'
userInput$proportions[(userInput$width / userInput$height) < 1.33] <- '< 4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.33] <- '4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.45] <- '3:2'
userInput$proportions[(userInput$width / userInput$height) >= 1.55] <- '> 3:2'
userInput$resolution <- as.integer(sqrt(userInput$height^2 + userInput$width^2))
#aggregate(good ~ resolution, data=train, FUN=function(x){sum(x)/length(x)})
test$Continent[test$longitude > 35 & test$longitude < 125 & test$latitude > 10 & test$latitude < 40] <- 'Asia'
#tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,99))
#submit <- data.frame(Id = test$id, good = Prediction)
#fancyRpartPlot(tree1)
#Prediction <- predict(tree1, test, type = "class")
test$proportions[(test$width / test$height) < 1.33] <- '< 4:3'
# Własna kolumna - rozdzielczość (właściwie: przekątna)
# Poniżej tylko zabawa drzewami decyzyjnymi
names(userInput) <- colnames(train)
test$good <- rep(0, 12000)
userInput$Continent <- 'Ocean'
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
train$Continent <- 'Ocean'
train$Continent[train$longitude > -80 & train$longitude < -35 & train$latitude > -55 & train$latitude < 12] <- 'South America'
train$Continent[train$longitude > -115 & train$longitude < -60 & train$latitude > 12 & train$latitude < 30] <- 'Middle America'
train$Continent[train$longitude > -168 & train$longitude < -125 & train$latitude > 50 & train$latitude < 72] <- 'South America'
train$Continent[train$longitude > -125 & train$longitude < -53 & train$latitude > 30 & train$latitude < 80] <- 'North America'
train$Continent[train$longitude >  113 & train$longitude < 168 & train$latitude > -48 & train$latitude < -12] <- 'Australia'
train$Continent[train$longitude > -10 & train$longitude < 40 & train$latitude > 36 & train$latitude < 72] <- 'Europe'
train$Continent[train$longitude > -18 & train$longitude < 35 & train$latitude > 5 & train$latitude < 36] <- 'Africa'
train$Continent[train$longitude > 50 & train$longitude < 10 & train$latitude > -35 & train$latitude < 5] <- 'Africa'
train$Continent[train$longitude > 35 & train$longitude < -50 & train$latitude > 13 & train$latitude < 0] <- 'Africa'
train$Continent[train$longitude > 40 & train$longitude < 145 & train$latitude > 30 & train$latitude < 85] <- 'Asia'
train$Continent[train$longitude > 35 & train$longitude < 125 & train$latitude > 10 & train$latitude < 40] <- 'Asia'
train$Continent[train$longitude > 30 & train$longitude < 85 & train$latitude > -10 & train$latitude < 20] <- 'Asia'
train$Continent[train$longitude > 140 & train$longitude < 180 & train$latitude > 50 & train$latitude < 75] <- 'Asia'
test$Continent <- 'Ocean'
test$Continent[test$longitude > -80 & test$longitude < -35 & test$latitude > -55 & test$latitude < 12] <- 'South America'
test$Continent[test$longitude > -115 & test$longitude < -60 & test$latitude > 12 & test$latitude < 30] <- 'Middle America'
test$Continent[test$longitude > -125 & test$longitude < -53 & test$latitude > 30 & test$latitude < 80] <- 'North America'
test$Continent[test$longitude > -168 & test$longitude < -125 & test$latitude > 50 & test$latitude < 72] <- 'South America'
test$Continent[test$longitude >  113 & test$longitude < 168 & test$latitude > -48 & test$latitude < -12] <- 'Australia'
test$Continent[test$longitude > -18 & test$longitude < 35 & test$latitude > 5 & test$latitude < 36] <- 'Africa'
test$Continent[test$longitude > 50 & test$longitude < 10 & test$latitude > -35 & test$latitude < 5] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < -50 & test$latitude > 13 & test$latitude < 0] <- 'Africa'
test$Continent[test$longitude > 40 & test$longitude < 145 & test$latitude > 30 & test$latitude < 85] <- 'Asia'
test$Continent[test$longitude > 35 & test$longitude < 125 & test$latitude > 10 & test$latitude < 40] <- 'Asia'
test$Continent[test$longitude > 30 & test$longitude < 85 & test$latitude > -10 & test$latitude < 20] <- 'Asia'
test$Continent[test$longitude > 140 & test$longitude < 180 & test$latitude > 50 & test$latitude < 75] <- 'Asia'
train$Continent <- factor(train$Continent)
test$Continent <- factor(test$Continent)
# Pozbycie się niewygodnych zer
train$width[train$width == 0] <- as.integer(1)
train$height[train$height == 0] <- as.integer(1)
# Własna kolumna - proporcjie
train$proportions[(train$width / train$height) < 1.33] <- '< 4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '< 4:3'
test$proportions[(test$width / test$height) >= 1.33] <- '4:3'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
prop.table(table(test$proportions))
# Własna kolumna - rozdzielczość (właściwie: przekątna)
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
train$resolution <- 0
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
userInput = data.frame(matrix(NA, nrow = 1, ncol = 13))
dim(userInput)
#aggregate(good ~ resolution, data=train, FUN=function(x){sum(x)/length(x)})
#fancyRpartPlot(tree1)
#submit <- data.frame(Id = test$id, good = Prediction)
#table(submit$good)
#prop.table(table(submit$good))
test$Continent[test$longitude > -10 & test$longitude < 40 & test$latitude > 36 & test$latitude < 72] <- 'Europe'
#Prediction <- predict(tree1, test, type = "class")
#tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,99))
# Poniżej tylko zabawa drzewami decyzyjnymi
# UserInput - wykorzystywany przy własnych danych.
#write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
names(userInput) <- colnames(train)
train$Continent <- 'Ocean'
train$Continent[train$longitude > -80 & train$longitude < -35 & train$latitude > -55 & train$latitude < 12] <- 'South America'
train$Continent[train$longitude > -115 & train$longitude < -60 & train$latitude > 12 & train$latitude < 30] <- 'Middle America'
train$Continent[train$longitude > -125 & train$longitude < -53 & train$latitude > 30 & train$latitude < 80] <- 'North America'
train$Continent[train$longitude > -168 & train$longitude < -125 & train$latitude > 50 & train$latitude < 72] <- 'South America'
train$Continent[train$longitude >  113 & train$longitude < 168 & train$latitude > -48 & train$latitude < -12] <- 'Australia'
train$Continent[train$longitude > -10 & train$longitude < 40 & train$latitude > 36 & train$latitude < 72] <- 'Europe'
train$Continent[train$longitude > -18 & train$longitude < 35 & train$latitude > 5 & train$latitude < 36] <- 'Africa'
train$Continent[train$longitude > 50 & train$longitude < 10 & train$latitude > -35 & train$latitude < 5] <- 'Africa'
train$Continent[train$longitude > 35 & train$longitude < -50 & train$latitude > 13 & train$latitude < 0] <- 'Africa'
train$Continent[train$longitude > 40 & train$longitude < 145 & train$latitude > 30 & train$latitude < 85] <- 'Asia'
train$Continent[train$longitude > 35 & train$longitude < 125 & train$latitude > 10 & train$latitude < 40] <- 'Asia'
train$Continent[train$longitude > 30 & train$longitude < 85 & train$latitude > -10 & train$latitude < 20] <- 'Asia'
train$Continent[train$longitude > 140 & train$longitude < 180 & train$latitude > 50 & train$latitude < 75] <- 'Asia'
test$Continent <- 'Ocean'
test$Continent[test$longitude > -80 & test$longitude < -35 & test$latitude > -55 & test$latitude < 12] <- 'South America'
test$Continent[test$longitude > -115 & test$longitude < -60 & test$latitude > 12 & test$latitude < 30] <- 'Middle America'
test$Continent[test$longitude > -125 & test$longitude < -53 & test$latitude > 30 & test$latitude < 80] <- 'North America'
test$Continent[test$longitude > -168 & test$longitude < -125 & test$latitude > 50 & test$latitude < 72] <- 'South America'
test$Continent[test$longitude >  113 & test$longitude < 168 & test$latitude > -48 & test$latitude < -12] <- 'Australia'
test$Continent[test$longitude > -10 & test$longitude < 40 & test$latitude > 36 & test$latitude < 72] <- 'Europe'
test$Continent[test$longitude > -18 & test$longitude < 35 & test$latitude > 5 & test$latitude < 36] <- 'Africa'
test$Continent[test$longitude > 50 & test$longitude < 10 & test$latitude > -35 & test$latitude < 5] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < -50 & test$latitude > 13 & test$latitude < 0] <- 'Africa'
test$Continent[test$longitude > 40 & test$longitude < 145 & test$latitude > 30 & test$latitude < 85] <- 'Asia'
test$Continent[test$longitude > 35 & test$longitude < 125 & test$latitude > 10 & test$latitude < 40] <- 'Asia'
test$Continent[test$longitude > 30 & test$longitude < 85 & test$latitude > -10 & test$latitude < 20] <- 'Asia'
test$Continent[test$longitude > 140 & test$longitude < 180 & test$latitude > 50 & test$latitude < 75] <- 'Asia'
train$Continent <- factor(train$Continent)
test$Continent <- factor(test$Continent)
train$width[train$width == 0] <- as.integer(1)
train$height[train$height == 0] <- as.integer(1)
# Własna kolumna - proporcjie
train$proportions[(train$width / train$height) < 1.33] <- '< 4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '< 4:3'
test$proportions[(test$width / test$height) >= 1.33] <- '4:3'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
prop.table(table(test$proportions))
# Własna kolumna - rozdzielczość (właściwie: przekątna)
train$resolution <- 0
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
# UserInput - wykorzystywany przy własnych danych.
userInput = data.frame(matrix(NA, nrow = 1, ncol = 13))
dim(userInput)
names(userInput) <- colnames(train)
commandArgs <- function() c(10, 25, 14, 720, 480, 23)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
if (length(commandArgs()) > 2)
{
tmpLongitude = as.numeric(args[3])
tmpLatitude <- as.numeric(args[2])
tmpHeight <- as.numeric(args[4])
tmpWidth <- as.numeric(args[5])
tmpSize <- as.numeric(args[6])
userInput[1,]$id <- as.integer(1)
userInput[1,]$latitude <- tmpLatitude
userInput[1,]$longitude <- tmpLongitude
userInput[1,]$width <- tmpWidth
userInput[1,]$height <- tmpHeight
userInput[1,]$size <- tmpSize
userInput$Continent <- 'Ocean'
userInput$Continent[userInput$longitude > -80 & userInput$longitude < -35 & userInput$latitude > -55 & userInput$latitude < 12] <- 'South America'
userInput$Continent[userInput$longitude > -115 & userInput$longitude < -60 & userInput$latitude > 12 & userInput$latitude < 30] <- 'Middle America'
userInput$Continent[userInput$longitude > -125 & userInput$longitude < -53 & userInput$latitude > 30 & userInput$latitude < 80] <- 'North America'
userInput$Continent[userInput$longitude > -168 & userInput$longitude < -125 & userInput$latitude > 50 & userInput$latitude < 72] <- 'South America'
userInput$Continent[userInput$longitude >  113 & userInput$longitude < 168 & userInput$latitude > -48 & userInput$latitude < -12] <- 'Australia'
userInput$Continent[userInput$longitude > -10 & userInput$longitude < 40 & userInput$latitude > 36 & userInput$latitude < 72] <- 'Europe'
userInput$Continent[userInput$longitude > -18 & userInput$longitude < 35 & userInput$latitude > 5 & userInput$latitude < 36] <- 'Africa'
userInput$Continent[userInput$longitude > 50 & userInput$longitude < 10 & userInput$latitude > -35 & userInput$latitude < 5] <- 'Africa'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < -50 & userInput$latitude > 13 & userInput$latitude < 0] <- 'Africa'
userInput$Continent[userInput$longitude > 40 & userInput$longitude < 145 & userInput$latitude > 30 & userInput$latitude < 85] <- 'Asia'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < 125 & userInput$latitude > 10 & userInput$latitude < 40] <- 'Asia'
userInput$Continent[userInput$longitude > 30 & userInput$longitude < 85 & userInput$latitude > -10 & userInput$latitude < 20] <- 'Asia'
userInput$Continent[userInput$longitude > 140 & userInput$longitude < 180 & userInput$latitude > 50 & userInput$latitude < 75] <- 'Asia'
userInput$proportions[(userInput$width / userInput$height) < 1.33] <- '< 4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.33] <- '4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.45] <- '3:2'
userInput$proportions[(userInput$width / userInput$height) >= 1.55] <- '> 3:2'
userInput$resolution <- as.integer(sqrt(userInput$height^2 + userInput$width^2))
View(userInput)
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
}
sink()
# Miejscowy random
set.seed(1)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= treeNumber)
# Dokonaj predykcji
random_forest_result3 <- predict(forest2, userInput, OOB = TRUE, type = "response")
# Zapisz wyniki do pliku
submit3 <- data.frame(Id = userInput$id, good = random_forest_result3)
write.csv(submit3, file = "CSV/userInput.csv", row.names = FALSE)
userInput$Continent <- 'Ocean'
View(userInput)
commandArgs <- function() c(10, 25, 14, 720, 480, 23)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
commandArgs <- function() c(20, 25, 14, 720, 480, 23)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
if (length(commandArgs()) > 2)
{
tmpLongitude = as.numeric(args[3])
tmpLatitude <- as.numeric(args[2])
tmpHeight <- as.numeric(args[4])
tmpWidth <- as.numeric(args[5])
tmpSize <- as.numeric(args[6])
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
setwd("E:/Git/BIAI-projekt/Data")
#setwd("C:/Users/Trimack/Desktop/studia/BIAI/Projekt/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
View(test)
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
setwd("E:/Git/BIAI-projekt/Data")
#setwd("C:/Users/Trimack/Desktop/studia/BIAI/Projekt/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
commandArgs <- function() c(20, 25, 14, 720, 480, 23)
library(randomForest)
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
tmpLongitude = as.numeric(args[3])
tmpLatitude <- as.numeric(args[2])
tmpHeight <- as.numeric(args[4])
tmpWidth <- as.numeric(args[5])
tmpSize <- as.numeric(args[6])
userInput[1,]$id <- as.integer(1)
userInput[1,]$latitude <- tmpLatitude
userInput[1,]$longitude <- tmpLongitude
userInput[1,]$width <- tmpWidth
userInput[1,]$height <- tmpHeight
userInput[1,]$size <- tmpSize
userInput$Continent <- 'Ocean'
userInput$Continent[userInput$longitude > -80 & userInput$longitude < -35 & userInput$latitude > -55 & userInput$latitude < 12] <- 'South America'
userInput$Continent[userInput$longitude > -115 & userInput$longitude < -60 & userInput$latitude > 12 & userInput$latitude < 30] <- 'Middle America'
userInput$Continent[userInput$longitude > -125 & userInput$longitude < -53 & userInput$latitude > 30 & userInput$latitude < 80] <- 'North America'
userInput$Continent[userInput$longitude > -168 & userInput$longitude < -125 & userInput$latitude > 50 & userInput$latitude < 72] <- 'South America'
userInput$Continent[userInput$longitude >  113 & userInput$longitude < 168 & userInput$latitude > -48 & userInput$latitude < -12] <- 'Australia'
userInput$Continent[userInput$longitude > -10 & userInput$longitude < 40 & userInput$latitude > 36 & userInput$latitude < 72] <- 'Europe'
userInput$Continent[userInput$longitude > -18 & userInput$longitude < 35 & userInput$latitude > 5 & userInput$latitude < 36] <- 'Africa'
userInput$Continent[userInput$longitude > 50 & userInput$longitude < 10 & userInput$latitude > -35 & userInput$latitude < 5] <- 'Africa'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < -50 & userInput$latitude > 13 & userInput$latitude < 0] <- 'Africa'
userInput$Continent[userInput$longitude > 40 & userInput$longitude < 145 & userInput$latitude > 30 & userInput$latitude < 85] <- 'Asia'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < 125 & userInput$latitude > 10 & userInput$latitude < 40] <- 'Asia'
userInput$Continent[userInput$longitude > 30 & userInput$longitude < 85 & userInput$latitude > -10 & userInput$latitude < 20] <- 'Asia'
userInput$Continent[userInput$longitude > 140 & userInput$longitude < 180 & userInput$latitude > 50 & userInput$latitude < 75] <- 'Asia'
userInput$proportions[(userInput$width / userInput$height) < 1.33] <- '< 4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.33] <- '4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.45] <- '3:2'
userInput$proportions[(userInput$width / userInput$height) >= 1.55] <- '> 3:2'
userInput$resolution <- as.integer(sqrt(userInput$height^2 + userInput$width^2))
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
cat(userInput$latitude)
cat('\n')
cat(userInput$Continent)
}
sink()
# Miejscowy random
set.seed(1)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= treeNumber)
# Dokonaj predykcji
random_forest_result3 <- predict(forest2, userInput, OOB = TRUE, type = "response")
# Zapisz wyniki do pliku
submit3 <- data.frame(Id = userInput$id, good = random_forest_result3)
write.csv(submit3, file = "CSV/userInput.csv", row.names = FALSE)
training <- read.csv("E:/Git/BIAI-projekt/Data/CSV/training.csv")
View(training)
userResult = submit3[1,2]
library(randomForest)
#commandArgs <- function() c(20, 25, 14, 720, 480, 23)
# Czytanie parametrów
commandArgs <- function() c(20, 25, 14, 720, 480, 23)
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
tmpLongitude = as.numeric(args[3])
tmpLatitude <- as.numeric(args[2])
tmpHeight <- as.numeric(args[4])
tmpWidth <- as.numeric(args[5])
tmpSize <- as.numeric(args[6])
userInput[1,]$id <- as.integer(1)
userInput[1,]$latitude <- tmpLatitude
userInput[1,]$longitude <- tmpLongitude
userInput[1,]$width <- tmpWidth
userInput[1,]$height <- tmpHeight
userInput[1,]$size <- tmpSize
# Policz dodatkowe kolumny dla rekordu użytkownika
userInput$Continent <- 'Ocean'
userInput$Continent[userInput$longitude > -80 & userInput$longitude < -35 & userInput$latitude > -55 & userInput$latitude < 12] <- 'South America'
userInput$Continent[userInput$longitude > -115 & userInput$longitude < -60 & userInput$latitude > 12 & userInput$latitude < 30] <- 'Middle America'
userInput$Continent[userInput$longitude > -125 & userInput$longitude < -53 & userInput$latitude > 30 & userInput$latitude < 80] <- 'North America'
userInput$Continent[userInput$longitude > -168 & userInput$longitude < -125 & userInput$latitude > 50 & userInput$latitude < 72] <- 'South America'
userInput$Continent[userInput$longitude >  113 & userInput$longitude < 168 & userInput$latitude > -48 & userInput$latitude < -12] <- 'Australia'
userInput$Continent[userInput$longitude > -10 & userInput$longitude < 40 & userInput$latitude > 36 & userInput$latitude < 72] <- 'Europe'
userInput$Continent[userInput$longitude > -18 & userInput$longitude < 35 & userInput$latitude > 5 & userInput$latitude < 36] <- 'Africa'
userInput$Continent[userInput$longitude > 50 & userInput$longitude < 10 & userInput$latitude > -35 & userInput$latitude < 5] <- 'Africa'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < -50 & userInput$latitude > 13 & userInput$latitude < 0] <- 'Africa'
userInput$Continent[userInput$longitude > 40 & userInput$longitude < 145 & userInput$latitude > 30 & userInput$latitude < 85] <- 'Asia'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < 125 & userInput$latitude > 10 & userInput$latitude < 40] <- 'Asia'
userInput$Continent[userInput$longitude > 30 & userInput$longitude < 85 & userInput$latitude > -10 & userInput$latitude < 20] <- 'Asia'
userInput$Continent[userInput$longitude > 140 & userInput$longitude < 180 & userInput$latitude > 50 & userInput$latitude < 75] <- 'Asia'
userInput$proportions[(userInput$width / userInput$height) < 1.33] <- '< 4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.33] <- '4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.45] <- '3:2'
userInput$proportions[(userInput$width / userInput$height) >= 1.55] <- '> 3:2'
userInput$resolution <- as.integer(sqrt(userInput$height^2 + userInput$width^2))
userInput$Continent = as.factor(userInput$Continent)
userInput$proportions = as.factor(userInput$proportions)
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
cat(userInput$latitude)
cat('\n')
cat(userInput$Continent)
}
sink()
# Miejscowy random
set.seed(1)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + proportions + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree= treeNumber)
# Dokonaj predykcji
random_forest_result3 <- predict(forest2, userInput, OOB = TRUE, type = "response")
# Zapisz wyniki do pliku
submit3 <- data.frame(Id = userInput$id, good = random_forest_result3)
write.csv(submit3, file = "CSV/userInput.csv", row.names = FALSE)
# Ustawia zmienną, do której może sobie sięgnąć r.net
userResult <- submit3[1,2]
setwd("E:/Git/BIAI-projekt/Data")
library(randomForest)
commandArgs <- function() c(20, 25, 14, 720, 480, 23)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
tmpLongitude = as.numeric(args[3])
tmpLatitude <- as.numeric(args[2])
tmpHeight <- as.numeric(args[4])
tmpWidth <- as.numeric(args[5])
tmpSize <- as.numeric(args[6])
userInput[1,]$id <- as.integer(1)
userInput[1,]$latitude <- tmpLatitude
userInput[1,]$longitude <- tmpLongitude
userInput[1,]$width <- tmpWidth
userInput[1,]$height <- tmpHeight
userInput[1,]$size <- tmpSize
# Policz dodatkowe kolumny dla rekordu użytkownika
userInput$Continent <- 'Ocean'
userInput$Continent[userInput$longitude > -80 & userInput$longitude < -35 & userInput$latitude > -55 & userInput$latitude < 12] <- 'South America'
userInput$Continent[userInput$longitude > -115 & userInput$longitude < -60 & userInput$latitude > 12 & userInput$latitude < 30] <- 'Middle America'
userInput$Continent[userInput$longitude > -125 & userInput$longitude < -53 & userInput$latitude > 30 & userInput$latitude < 80] <- 'North America'
userInput$Continent[userInput$longitude > -168 & userInput$longitude < -125 & userInput$latitude > 50 & userInput$latitude < 72] <- 'South America'
userInput$Continent[userInput$longitude >  113 & userInput$longitude < 168 & userInput$latitude > -48 & userInput$latitude < -12] <- 'Australia'
userInput$Continent[userInput$longitude > -10 & userInput$longitude < 40 & userInput$latitude > 36 & userInput$latitude < 72] <- 'Europe'
userInput$Continent[userInput$longitude > -18 & userInput$longitude < 35 & userInput$latitude > 5 & userInput$latitude < 36] <- 'Africa'
userInput$Continent[userInput$longitude > 50 & userInput$longitude < 10 & userInput$latitude > -35 & userInput$latitude < 5] <- 'Africa'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < -50 & userInput$latitude > 13 & userInput$latitude < 0] <- 'Africa'
userInput$Continent[userInput$longitude > 40 & userInput$longitude < 145 & userInput$latitude > 30 & userInput$latitude < 85] <- 'Asia'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < 125 & userInput$latitude > 10 & userInput$latitude < 40] <- 'Asia'
userInput$Continent[userInput$longitude > 30 & userInput$longitude < 85 & userInput$latitude > -10 & userInput$latitude < 20] <- 'Asia'
userInput$Continent[userInput$longitude > 140 & userInput$longitude < 180 & userInput$latitude > 50 & userInput$latitude < 75] <- 'Asia'
userInput$proportions[(userInput$width / userInput$height) < 1.33] <- '< 4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.33] <- '4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.45] <- '3:2'
userInput$proportions[(userInput$width / userInput$height) >= 1.55] <- '> 3:2'
userInput$resolution <- as.integer(sqrt(userInput$height^2 + userInput$width^2))
userInput$Continent = as.factor(userInput$Continent)
userInput$proportions = as.factor(userInput$proportions)
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
cat(userInput$latitude)
cat('\n')
cat(userInput$Continent)
}
sink()
# Miejscowy random
set.seed(1)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + proportions + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree= treeNumber)
# Dokonaj predykcji
random_forest_result3 <- predict(forest2, userInput, OOB = TRUE, type = "response")
# Zapisz wyniki do pliku
submit3 <- data.frame(Id = userInput$id, good = random_forest_result3)
write.csv(submit3, file = "CSV/userInput.csv", row.names = FALSE)
# Ustawia zmienną, do której może sobie sięgnąć r.net
userResult <- submit3[1,2]
userResult
userInput$Continent <- 'Ocean'
userInput$Continent[userInput$longitude > -80 & userInput$longitude < -35 & userInput$latitude > -55 & userInput$latitude < 12] <- 'South America'
userInput$Continent[userInput$longitude > -115 & userInput$longitude < -60 & userInput$latitude > 12 & userInput$latitude < 30] <- 'Middle America'
userInput$Continent[userInput$longitude > -125 & userInput$longitude < -53 & userInput$latitude > 30 & userInput$latitude < 80] <- 'North America'
userInput$Continent[userInput$longitude > -168 & userInput$longitude < -125 & userInput$latitude > 50 & userInput$latitude < 72] <- 'South America'
userInput$Continent[userInput$longitude >  113 & userInput$longitude < 168 & userInput$latitude > -48 & userInput$latitude < -12] <- 'Australia'
userInput$Continent[userInput$longitude > -10 & userInput$longitude < 40 & userInput$latitude > 36 & userInput$latitude < 72] <- 'Europe'
userInput$Continent[userInput$longitude > -18 & userInput$longitude < 35 & userInput$latitude > 5 & userInput$latitude < 36] <- 'Africa'
userInput$Continent[userInput$longitude > 50 & userInput$longitude < 10 & userInput$latitude > -35 & userInput$latitude < 5] <- 'Africa'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < -50 & userInput$latitude > 13 & userInput$latitude < 0] <- 'Africa'
userInput$Continent[userInput$longitude > 40 & userInput$longitude < 145 & userInput$latitude > 30 & userInput$latitude < 85] <- 'Asia'
userInput$Continent[userInput$longitude > 35 & userInput$longitude < 125 & userInput$latitude > 10 & userInput$latitude < 40] <- 'Asia'
userInput$Continent[userInput$longitude > 30 & userInput$longitude < 85 & userInput$latitude > -10 & userInput$latitude < 20] <- 'Asia'
userInput$Continent[userInput$longitude > 140 & userInput$longitude < 180 & userInput$latitude > 50 & userInput$latitude < 75] <- 'Asia'
userInput$proportions[(userInput$width / userInput$height) < 1.33] <- '< 4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.33] <- '4:3'
userInput$proportions[(userInput$width / userInput$height) >= 1.45] <- '3:2'
userInput$proportions[(userInput$width / userInput$height) >= 1.55] <- '> 3:2'
userInput$resolution <- as.integer(sqrt(userInput$height^2 + userInput$width^2))
#userInput$Continent = as.factor(userInput$Continent)
userInput$proportions = as.factor(userInput$proportions)
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
cat(userInput$latitude)
cat('\n')
cat(userInput$Continent)
}
sink()
# Miejscowy random
set.seed(1)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + proportions + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree= treeNumber)
# Dokonaj predykcji
random_forest_result3 <- predict(forest2, userInput, OOB = TRUE, type = "response")
# Zapisz wyniki do pliku
submit3 <- data.frame(Id = userInput$id, good = random_forest_result3)
write.csv(submit3, file = "CSV/userInput.csv", row.names = FALSE)
test <- read.csv("E:/Git/BIAI-projekt/Data/CSV/test.csv")
View(test)

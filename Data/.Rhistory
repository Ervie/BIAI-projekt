x <- 42
x/ 2
40 + 2
x <- c(1:5)
plot(x)
source('test.R')
for (i in 1:5) {
writeLines(c)
writeLines(x)
}
writeLines("Hello")
}
x <- c(1:5)
for (i in 1:5) {
writeLines("Hello")
}
x <- c(1:5)
for (i in 1:5) {
writeLines("Hello")
}
x <- c(1:5)
for (i in 1:5) {
writeLines(x[i])
}
x <- c(1:5)
for (i in 1:5) {
x[i]
}
x <- rnorm(3000)
# obliczenie histogramu (bez rysowania) dla 50 przedziałów
histX <- hist(x, breaks=50, plot=FALSE)
# wykreślenie histogramu z kolorem wypełnienia słupków ustawionym na czerwony
plot(histX, col="red")
test <- read.csv("E:/Git/BIAI-projekt/Data/test.csv")
View(test)
training <- read.csv("E:/Git/BIAI-projekt/Data/training.csv")
View(training)
for (i in 1:5) {
writeLines("Hello World")
}
writeLines("Hello World")
> sink("outfile.txt")
> cat("hello")
> cat("\n")
> cat("world")
> sink()
sink("outfile.txt")
cat("hello")
cat("\n")
cat("world")
sink()
setwd("~/Visual Studio 2012/Projects/ConsoleApplication1/ConsoleApplication1")
setwd("~/Visual Studio 2012/Projects/ConsoleApplication1/ConsoleApplication1")
train <- read.csv("training.csv", stringsAsFactors = FALSE)
setwd("E:/Git/BIAI-projekt/Data")
train <- read.csv("training.csv", stringsAsFactors = FALSE)
View(train)
View(training)
table(train$good)
prop.table((train$good))
prop.table(table(train$good))
str(train)
prop.table(table(train$good))
test <- read.csv("test.csv", stringsAsFactors = FALSE)
test <- read.csv("test.csv", stringsAsFactors = FALSE)
View(test)
test$good <- rep(0, 12000)
submit <- data.frame(PhotoId = test$id, goog = test$good)
submit <- data.frame(PhotoId = test$id, good = test$good)
write.csv(submit, file="beginning.csv", row.names = FALSE)
submit <- data.frame(PhotoId = test$id, good = test$good)
write.csv(submit, file="beginning.csv", row.names = FALSE)
prop.table(table(train$good))
table(train$good)
str(train)
summary(train$size)
source('test.R')
source('test.R')
q()
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
write.csv(submit, file="CSV/beginning.csv", row.names = FALSE)
summary(train$size)
str(train)
summary(train$size)
summary(train$latitude)
summary(train$longitude)
summary(train$width)
prop.table(table(test$size))
prop.table(table(train$size, train$good ))
prop.table(table(train$size, train$good), 1)
prop.table(table(train$latitude, train$good), 1)
str(train)
train$y <- '70+'
train$y[train$latitude < 70 & train$latitude >= 60] <- '70-60'
train$y[train$latitude < 60 & train$latitude >= 50] <- '60-50'
train$y[train$latitude < 50 & train$latitude >= 40] <- '50-40'
train$y[train$latitude < 40 & train$latitude >= 30] <- '40-30'
train$y[train$latitude < 30 & train$latitude >= 20] <- '30-20'
train$y[train$latitude < 20 & train$latitude >= 10] <- '20-10'
train$y[train$latitude < 10 & train$latitude >= 0] <- '10-0'
summary(train$y)
prop.table((table(train$y)))
prop.table((table(train$y, train$good), 1))
prop.table(table(train$y, train$good), 1)
train$y[train$latitude < 0 & train$latitude >= -10] <- '<-10,0)'
prop.table(table(train$y, train$good), 1)
train$y <- '70+'
train$y[train$latitude < 70 & train$latitude >= 60] <- '<60,70)'
train$y[train$latitude < 60 & train$latitude >= 50] <- '<50,60)'
train$y[train$latitude < 50 & train$latitude >= 40] <- '<40,50)'
train$y[train$latitude < 40 & train$latitude >= 30] <- '<30,40)'
train$y[train$latitude < 30 & train$latitude >= 20] <- '<20,30)'
train$y[train$latitude < 20 & train$latitude >= 10] <- '<10,20)'
train$y[train$latitude < 10 & train$latitude >= 0] <- '<0,10)'
train$y[train$latitude < 0 & train$latitude >= -10] <- '<-10,0)'
prop.table(table(train$y, train$good), 1)
train$y <- ' > 70'
train$y[train$latitude < 70 & train$latitude >= 60] <- '<60,70)'
train$y[train$latitude < 60 & train$latitude >= 50] <- '<50,60)'
train$y[train$latitude < 30 & train$latitude >= 20] <- '<20,30)'
train$y[train$latitude < 10 & train$latitude >= 0] <- '<0,10)'
train$y[train$latitude < 0 & train$latitude >= -10] <- '<-10,0)'
train$y[train$latitude < -10 & train$latitude >= -20] <- '<-20,-10)'
train$y[train$latitude < 50 & train$latitude >= 40] <- '<40,50)'
train$y[train$latitude < 20 & train$latitude >= 10] <- '<10,20)'
train$y[train$latitude < -20 & train$latitude >= -30] <- '<-20,-30)'
train$y[train$latitude < 40 & train$latitude >= 30] <- '<30,40)'
train$y[train$latitude < -30 & train$latitude >= -20] <- '<-30,-40)'
train$y[train$latitude < -40 & train$latitude >= -50] <- '<-40,-50)'
train$y[train$latitude < -50 & train$latitude >= -60] <- '<-50,-60)'
train$y[train$latitude < -60 & train$latitude >= -70] <- '<-60,70)'
train$y[train$latitude < -70] <- ' < -70'
#train$Fare2[train$Fare < 10] <- '<10'
prop.table(table(train$y, train$good), 1)
aggregate(isGood ~ y, data=train, FUN=sum(x))
aggregate(good ~ y, data=train, FUN=sum(x))
aggregate(good ~ y, data=train, FUN=sum
aggregate(good ~ y, data=train, FUN=sum)
aggregate(good ~ y, data=train, FUN=sum)
aggregate(good ~ y, data=train, FUN=lenght)
aggregate(good ~ y, data=train, FUN=length)
aggregate(good ~ y, data=train, FUN=function(x){length(x)/sum(x))
aggregate(good ~ y, data=train, FUN=function(x){sum(x)/length(x)})
library(ggplot2)
library(randomForest)
library(rpart)
tree1 <- rpart(good ~ longitude + latitude, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(rpart)
setwd("E:/Git/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
tree1 <- rpart(good ~ longitude + latitude, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(new.fit)
fancyRpartPlot(new.tree1)
tree1 <- rpart(good ~  width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
fancyRpartPlot(new.tree1)
tree1 <- rpart(good ~  width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~  width + height, data=train, method = "class", control=rpart.control(minsplit=4000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~  width + height, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~  width + height, data=train, method = "class", control=rpart.control(minsplit=80000, cp=0,5))
tree1 <- rpart(good ~  width + height, data=train, method = "class", control=rpart.control(minsplit=8000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~  height, data=train, method = "class", control=rpart.control(minsplit=8000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=4000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=10, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=50, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=500, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=300, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=200, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=250, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=250, cp=1))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=200, cp=1))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=200, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=500, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,01))
fancyRpartPlot(tree1)
test$good <- Na
test$good <- NA
combi <- rbind(train, test)
View(combi)
combi$name = as.array(combi$name)
combi$name[1]
strsplit(combi$name[1], split='[ ]')
combi$name[1]
strsplit(combi$name[1], split=' ')
combi$name[1]
strsplit(combi$name[1], split=' ')[[1]]
strsplit(combi$name[1], split=' ')[[1]][2]
train$resolution <- sqrt(train$height^2 + train$width^2)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=1))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,99))
tree1 <- rpart(good ~ resolution, data=train, method = "anova", control=rpart.control(minsplit=1000, cp=0,99))
fancyRpartPlot(tree1)
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "anova", control=rpart.control(minsplit=1000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "anova", control=rpart.control(minsplit=2000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2500, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=3000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=5000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=5000, cp=0,05))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=5000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,0))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,9))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution + width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,9))
fancyRpartPlot(tree1)

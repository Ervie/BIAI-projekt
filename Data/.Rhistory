bestmtry <- tuneRF(train[-7], train$good, ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=200)
#forest2 <- randomForest(as.factor(good) ~ ., data = train, importance=TRUE, ntree=200)
importance(forest2)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + width + height, data = train, mtry = 2, importance=TRUE, ntree=200)
importance(forest2)
varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
+ latitude + longitude
+ latitude + longitude
+ latitude + longitude
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=200)
#forest2 <- randomForest(as.factor(good) ~ ., data = train, importance=TRUE, ntree=200)
importance(forest2)
varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 3)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 3)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 3)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 2)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100, mtry = 2)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
set.seed(2)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
set.seed(3)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
table(train$proportions)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- '4:3'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) > 1.33] <- '4:3'
test$proportions[(test$width / test$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
table(train$proportions)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.33] <- 'or 4:3'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.55] <- '> 3:2'
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
table(train$height)
table(train$width)
train$width[train$width == 0] <- 1
train$height[train$height == 0] <- 1
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
train$width[train$width == 0] <- 1
train$height[train$height == 0] <- 1
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) >= 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) >= 1.33] <- 'or 4:3'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
.
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) >= 1.33] <- '4:3'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
test$proportions
prop.table(table(test$proportions))
prop.table(table(test$width))
train$width[train$width = 0] <- 1
train$height[train$height = 0] <- 1
train$width[train$width == 0] <- as.integer(1)
train$height[train$height == 0] <- as.integer(1)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
prop.table(table(test$width))
prop.table(table(test$width))
prop.table(table(test$proportions))
train$resolution <- 0
train$proportions[(train$width / train$height) < 1.33] <- 'ora'
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
test$good <- rep(0, 12000)
prop.table(table(train$good))
train$Continent <- 'Ocean'
train$Continent[train$longitude > -80 & train$longitude < -35 & train$latitude > -55 & train$latitude < 12] <- 'South America'
train$Continent[train$longitude > -115 & train$longitude < -60 & train$latitude > 12 & train$latitude < 30] <- 'Middle America'
train$Continent[train$longitude > -125 & train$longitude < -53 & train$latitude > 30 & train$latitude < 80] <- 'North America'
train$Continent[train$longitude > -168 & train$longitude < -125 & train$latitude > 50 & train$latitude < 72] <- 'South America'
train$Continent[train$longitude >  113 & train$longitude < 168 & train$latitude > -48 & train$latitude < -12] <- 'Australia'
train$Continent[train$longitude > -10 & train$longitude < 40 & train$latitude > 36 & train$latitude < 72] <- 'Europe'
train$Continent[train$longitude > -18 & train$longitude < 35 & train$latitude > 5 & train$latitude < 36] <- 'Africa'
train$Continent[train$longitude > 35 & train$longitude < -50 & train$latitude > 13 & train$latitude < 0] <- 'Africa'
train$Continent[train$longitude > 50 & train$longitude < 10 & train$latitude > -35 & train$latitude < 5] <- 'Africa'
train$Continent[train$longitude > 40 & train$longitude < 145 & train$latitude > 30 & train$latitude < 85] <- 'Asia'
train$Continent[train$longitude > 35 & train$longitude < 125 & train$latitude > 10 & train$latitude < 40] <- 'Asia'
train$Continent[train$longitude > 30 & train$longitude < 85 & train$latitude > -10 & train$latitude < 20] <- 'Asia'
train$Continent[train$longitude > 140 & train$longitude < 180 & train$latitude > 50 & train$latitude < 75] <- 'Asia'
test$Continent <- 'Ocean'
test$Continent[test$longitude > -80 & test$longitude < -35 & test$latitude > -55 & test$latitude < 12] <- 'South America'
test$Continent[test$longitude > -115 & test$longitude < -60 & test$latitude > 12 & test$latitude < 30] <- 'Middle America'
test$Continent[test$longitude > -125 & test$longitude < -53 & test$latitude > 30 & test$latitude < 80] <- 'North America'
test$Continent[test$longitude > -168 & test$longitude < -125 & test$latitude > 50 & test$latitude < 72] <- 'South America'
test$Continent[test$longitude >  113 & test$longitude < 168 & test$latitude > -48 & test$latitude < -12] <- 'Australia'
test$Continent[test$longitude > -18 & test$longitude < 35 & test$latitude > 5 & test$latitude < 36] <- 'Africa'
test$Continent[test$longitude > 50 & test$longitude < 10 & test$latitude > -35 & test$latitude < 5] <- 'Africa'
test$Continent[test$longitude > -10 & test$longitude < 40 & test$latitude > 36 & test$latitude < 72] <- 'Europe'
test$Continent[test$longitude > 40 & test$longitude < 145 & test$latitude > 30 & test$latitude < 85] <- 'Asia'
test$Continent[test$longitude > 35 & test$longitude < -50 & test$latitude > 13 & test$latitude < 0] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < 125 & test$latitude > 10 & test$latitude < 40] <- 'Asia'
test$Continent[test$longitude > 30 & test$longitude < 85 & test$latitude > -10 & test$latitude < 20] <- 'Asia'
test$Continent[test$longitude > 140 & test$longitude < 180 & test$latitude > 50 & test$latitude < 75] <- 'Asia'
train$Continent <- factor(train$Continent)
test$Continent <- factor(test$Continent)
train$width[train$width == 0] <- as.integer(1)
train$height[train$height == 0] <- as.integer(1)
train$proportions[(train$width / train$height) < 1.33] <- '< 4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '< 4:3'
test$proportions[(test$width / test$height) >= 1.33] <- '4:3'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
prop.table(table(test$proportions))
train$resolution <- 0
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size  + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
+ latitude + longitude
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
set.seed(1)
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
library(party)
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(good ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data=train  controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data=train, controls = cforest_unbiased(ntree = 10, mtry = 3))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
prop.table(table(submit$good))
set.seed(3)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
aggregate(good ~ Continent, data=train, FUN=function(x){sum(x)/length(x)})
aggregate(good ~ proportions, data=train, FUN=function(x){sum(x)/length(x)})
aggregate(good ~ resolution, data=train, FUN=function(x){sum(x)/length(x)})
View(submit2)
set.seed(4)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= treeNumber)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= 100)
set.seed(4)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= 100)
importance(forest2)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
varImpPlot(forest2)
install.packages(neuralnetwork)
install.packages(neuralnet)
install.packages('neuralnet')
library(neuralnet)
neural <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=2, err.fct="ce", linear.output=FALSE)
neural <- neuralnet(good ~ longitude + latitude + width + height + size, data=train, hidden=2, err.fct="ce", linear.output=FALSE)
print(neural)
plot(neural)
submit3 <- compute(neural, test)
neural <- neuralnet(good ~ longitude + latitude + width + height + size, data=train)
plot(neural)
neural <- neuralnet(good ~ longitude + latitude + width + height + size, data=train, stepmax = 10000000)
plot(neural)
# Stwórz plik wynikowy
submit3 <- compute(neural, test)
write.csv(submit3, file = "CSV/neural_network.csv", row.names = FALSE)
prop.table(table(submit2$good))
prop.table(table(submit3$good))
str(train)
summary(train)
submit3 <- compute(neural, test)
print(neural)
plot(neural)
columns <- c("latitude","longitude","width","height", "size")
covariate <- subset(test, select = columns)
submit3 <- compute(neural, covariate)
write.csv(submit3, file = "CSV/neural_network.csv", row.names = FALSE)
prop.table(table(submit3$good))
View(covariate)
submit3 <- compute(neural, covariate)
View(covariate)
View(covariate)
prop.table(table(train$good))
norm.fun = function(x){(x - min(x))/(max(x) - min(x))}
train.norm = apply(train, 2, norm.fun)
?apply
plot(neural)
submit3 <- compute(neural, nn)
submit3 <- compute(neural, covariate)
neural_result <- compute(neural, covariate)
neural_result <- compute(neural, covariate)
submit3 <- data.frame(Id = test$id, good = neural_result)
write.csv(submit3, file = "CSV/neural_network.csv", row.names = FALSE)
prop.table(table(submit3$good))
submit3 <- data.frame(Id = test$id, good = neural_result$net.result)
write.csv(submit3, file = "CSV/neural_network.csv", row.names = FALSE)
prop.table(table(submit3$good))
?neuralnet
neural <- neuralnet(good ~ longitude + latitude + width + height + size, data=train, stepmax = 10000000, treshold = 0.01, linear.output = FALSE)
neural <- neuralnet(good ~ longitude + latitude + width + height + size, data=train, stepmax = 10000000, threshold = 0.01, linear.output = FALSE)
plot(neural)
columns <- c("latitude","longitude","width","height", "size")
covariate <- subset(test, select = columns)
# Stwórz plik wynikowy
neural_result <- compute(neural, covariate)
submit3 <- data.frame(Id = test$id, good = neural_result$net.result)
write.csv(submit3, file = "CSV/neural_network.csv", row.names = FALSE)
prop.table(table(submit3$good))
View(submit3)
table(submit3$good)
neural_result <- prediction(neural)
submit3 <- data.frame(Id = test$id, good = neural_result$net.result)
write.csv(submit3, file = "CSV/neural_network.csv", row.names = FALSE)
prop.table(table(submit3$good))
submit3 <- data.frame(Id = test$id, good = neural_result)
neural_result <- compute(neural, covariate)
submit3 <- data.frame(Id = test$id, neural_result$net.result)
write.csv(submit3, file = "CSV/neural_network.csv", row.names = FALSE)
prop.table(table(submit3$good))
table(submit3$good)
View(submit3)
norm.fun = function(x){(x - min(x))/(max(x) - min(x))}
train.norm = apply(train, 2, norm.fun)
train.norm = apply(train[,2:6], 2, norm.fun)
neural <- neuralnet(good ~ longitude + latitude + width + height + size, data=train, hidden = 5, stepmax = 10000000, threshold = 0.01, linear.output = FALSE)
install.packages("randomForest")
install.packages('neuralnet')
install.packages('party')
install.packages("randomForest")
library(rpart)
#varImpPlot(forest2)
# Miejscowy random
# Miejscowy random
set.seed(4)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= 100)
# Miejscowy random
set.seed(4)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= 100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
}
sink()
# Miejscowy random
set.seed(4)
set.seed(4)
set.seed(4)
# Stwórz las drzew decyzyjnych
# Stwórz las drzew decyzyjnych
# Stwórz las drzew decyzyjnych
source('C:/Users/Trimack/Desktop/studia/BIAI/Projekt/BIAI-projekt/Data/Forest2.R')
library(randomForest)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
}
sink()
# Miejscowy random
set.seed(4)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= 100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
#Użyj biblioteki
library(randomForest)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
if (length(commandArgs()) > 2)
{
tmpLongitude = as.numeric(args[3])
tmpLatitude <- as.numeric(args[2])
tmpHeight <- as.numeric(args[4])
tmpWidth <- as.numeric(args[5])
tmpSize <- as.numeric(args[6])
userInput = data.frame(matrix(NA, nrow = 1, ncol = 10))
dim(userInput)
names(userInput) <- colnames(train)
userInput[1,]$id <- as.integer(1)
userInput[1,]$latitude <- tmpLatitude
userInput[1,]$longitude <- tmpLongitude
userInput[1,]$width <- tmpWidth
userInput[1,]$height <- tmpHeight
userInput[1,]$size <- tmpSize
}
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
}
sink()
# Miejscowy random
set.seed(1)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= treeNumber)
# Dokonaj predykcji
random_forest_result3 <- predict(forest2, userInput, OOB = TRUE, type = "response")
# Zapisz wyniki do pliku
submit3 <- data.frame(Id = userInput$id, good = random_forest_result3)
write.csv(submit3, file = "CSV/userInput.csv", row.names = FALSE)
#Użyj biblioteki
library(randomForest)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
sink()
# Miejscowy random
}
set.seed(4)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= 100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
#Użyj biblioteki
library(randomForest)
# Czytanie parametrów
args=(commandArgs())
treeNumber <-  as.numeric(args[1])
# Tylko do sprawdzania, czy dobrze przekazano parametry
sink(file = "output.txt")
for (i in 1:length(args))
{
cat(args[i])
cat('\n')
}
sink()
# Miejscowy random
set.seed(4)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree= 100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))

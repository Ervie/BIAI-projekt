table(test$proportions)
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + proportions, data = train, importance=TRUE, ntree=200)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size, data = train, importance=TRUE, ntree=200)
varImpPlot(forest2)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- '4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- '4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
test$good <- rep(0, 12000)
prop.table(table(train$latitude, train$good), 1)
train$Continent <- 'Ocean'
train$Continent[train$longitude > -80 & train$longitude < -35 & train$latitude > -55 & train$latitude < 12] <- 'South America'
train$Continent[train$longitude > -115 & train$longitude < -60 & train$latitude > 12 & train$latitude < 30] <- 'Middle America'
train$Continent[train$longitude > -125 & train$longitude < -53 & train$latitude > 30 & train$latitude < 80] <- 'North America'
train$Continent[train$longitude > -168 & train$longitude < -125 & train$latitude > 50 & train$latitude < 72] <- 'South America'
train$Continent[train$longitude >  113 & train$longitude < 168 & train$latitude > -48 & train$latitude < -12] <- 'Australia'
train$Continent[train$longitude > -10 & train$longitude < 40 & train$latitude > 36 & train$latitude < 72] <- 'Europe'
train$Continent[train$longitude > -18 & train$longitude < 35 & train$latitude > 5 & train$latitude < 36] <- 'Africa'
train$Continent[train$longitude > 50 & train$longitude < 10 & train$latitude > -35 & train$latitude < 5] <- 'Africa'
train$Continent[train$longitude > 35 & train$longitude < -50 & train$latitude > 13 & train$latitude < 0] <- 'Africa'
train$Continent[train$longitude > 40 & train$longitude < 145 & train$latitude > 30 & train$latitude < 85] <- 'Asia'
train$Continent[train$longitude > 35 & train$longitude < 125 & train$latitude > 10 & train$latitude < 40] <- 'Asia'
train$Continent[train$longitude > 30 & train$longitude < 85 & train$latitude > -10 & train$latitude < 20] <- 'Asia'
train$Continent[train$longitude > 140 & train$longitude < 180 & train$latitude > 50 & train$latitude < 75] <- 'Asia'
test$Continent <- 'Ocean'
test$Continent[test$longitude > -80 & test$longitude < -35 & test$latitude > -55 & test$latitude < 12] <- 'South America'
test$Continent[test$longitude > -115 & test$longitude < -60 & test$latitude > 12 & test$latitude < 30] <- 'Middle America'
test$Continent[test$longitude > -168 & test$longitude < -125 & test$latitude > 50 & test$latitude < 72] <- 'South America'
test$Continent[test$longitude > -125 & test$longitude < -53 & test$latitude > 30 & test$latitude < 80] <- 'North America'
test$Continent[test$longitude >  113 & test$longitude < 168 & test$latitude > -48 & test$latitude < -12] <- 'Australia'
test$Continent[test$longitude > -10 & test$longitude < 40 & test$latitude > 36 & test$latitude < 72] <- 'Europe'
test$Continent[test$longitude > -18 & test$longitude < 35 & test$latitude > 5 & test$latitude < 36] <- 'Africa'
test$Continent[test$longitude > 50 & test$longitude < 10 & test$latitude > -35 & test$latitude < 5] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < -50 & test$latitude > 13 & test$latitude < 0] <- 'Africa'
test$Continent[test$longitude > 40 & test$longitude < 145 & test$latitude > 30 & test$latitude < 85] <- 'Asia'
test$Continent[test$longitude > 35 & test$longitude < 125 & test$latitude > 10 & test$latitude < 40] <- 'Asia'
test$Continent[test$longitude > 30 & test$longitude < 85 & test$latitude > -10 & test$latitude < 20] <- 'Asia'
test$Continent[test$longitude > 140 & test$longitude < 180 & test$latitude > 50 & test$latitude < 75] <- 'Asia'
train$Continent <- factor(train$Continent)
test$Continent <- factor(test$Continent)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- '4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) > 1.33] <- '4:3'
test$proportions[(test$width / test$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
table(test$proportions)
train$resolution <- 0
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size, data = train, importance=TRUE, ntree=200)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + proportions, data = train, importance=TRUE, ntree=200)
tree1 <- rpart(good ~ proportions + Continent + resolution, data=train, method = "anova", control=rpart.control(minsplit=10000, cp=0,99))
fancyRpartPlot(tree1)
table(test$proportions)
table(train$proportions)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + proportions, data = train, importance=TRUE, ntree=200)
set.seed(1)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + proportions, data = train, importance=TRUE, ntree=200)
train$pixels <- (train$width * train$height)
table(train$pixels)
tree1 <- rpart(good ~ pixels, data=train, method = "anova", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
train$pixels <- (train$width * train$height)/ (train$size * 1000)
tree1 <- rpart(good ~ pixels, data=train, method = "anova", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
# Info o tabeli
str(train)
# Ilość dobrych i złych zdjęć
table(train$good)
# Proporcje dobrych i złych zdjęć
prop.table(table(train$good))
# Dodanie nowej kolumny i wypełnienie zertami
test$good <- rep(0, 12000)
# Stworzenie nowego dataFrame'u na podstawie test.csv
summary(train$width)
prop.table(table(train$latitude, train$good), 1)
train$Continent <- 'Ocean'
train$Continent[train$longitude > -80 & train$longitude < -35 & train$latitude > -55 & train$latitude < 12] <- 'South America'
train$Continent[train$longitude > -115 & train$longitude < -60 & train$latitude > 12 & train$latitude < 30] <- 'Middle America'
train$Continent[train$longitude > -125 & train$longitude < -53 & train$latitude > 30 & train$latitude < 80] <- 'North America'
train$Continent[train$longitude > -168 & train$longitude < -125 & train$latitude > 50 & train$latitude < 72] <- 'South America'
train$Continent[train$longitude >  113 & train$longitude < 168 & train$latitude > -48 & train$latitude < -12] <- 'Australia'
train$Continent[train$longitude > -10 & train$longitude < 40 & train$latitude > 36 & train$latitude < 72] <- 'Europe'
train$Continent[train$longitude > -18 & train$longitude < 35 & train$latitude > 5 & train$latitude < 36] <- 'Africa'
train$Continent[train$longitude > 50 & train$longitude < 10 & train$latitude > -35 & train$latitude < 5] <- 'Africa'
train$Continent[train$longitude > 35 & train$longitude < -50 & train$latitude > 13 & train$latitude < 0] <- 'Africa'
train$Continent[train$longitude > 40 & train$longitude < 145 & train$latitude > 30 & train$latitude < 85] <- 'Asia'
train$Continent[train$longitude > 35 & train$longitude < 125 & train$latitude > 10 & train$latitude < 40] <- 'Asia'
train$Continent[train$longitude > 30 & train$longitude < 85 & train$latitude > -10 & train$latitude < 20] <- 'Asia'
train$Continent[train$longitude > 140 & train$longitude < 180 & train$latitude > 50 & train$latitude < 75] <- 'Asia'
test$Continent <- 'Ocean'
test$Continent[test$longitude > -80 & test$longitude < -35 & test$latitude > -55 & test$latitude < 12] <- 'South America'
test$Continent[test$longitude > -115 & test$longitude < -60 & test$latitude > 12 & test$latitude < 30] <- 'Middle America'
test$Continent[test$longitude > -125 & test$longitude < -53 & test$latitude > 30 & test$latitude < 80] <- 'North America'
test$Continent[test$longitude > -168 & test$longitude < -125 & test$latitude > 50 & test$latitude < 72] <- 'South America'
test$Continent[test$longitude >  113 & test$longitude < 168 & test$latitude > -48 & test$latitude < -12] <- 'Australia'
test$Continent[test$longitude > -10 & test$longitude < 40 & test$latitude > 36 & test$latitude < 72] <- 'Europe'
test$Continent[test$longitude > -18 & test$longitude < 35 & test$latitude > 5 & test$latitude < 36] <- 'Africa'
test$Continent[test$longitude > 50 & test$longitude < 10 & test$latitude > -35 & test$latitude < 5] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < -50 & test$latitude > 13 & test$latitude < 0] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < 125 & test$latitude > 10 & test$latitude < 40] <- 'Asia'
test$Continent[test$longitude > 40 & test$longitude < 145 & test$latitude > 30 & test$latitude < 85] <- 'Asia'
test$Continent[test$longitude > 30 & test$longitude < 85 & test$latitude > -10 & test$latitude < 20] <- 'Asia'
test$Continent[test$longitude > 140 & test$longitude < 180 & test$latitude > 50 & test$latitude < 75] <- 'Asia'
train$Continent <- factor(train$Continent)
test$Continent <- factor(test$Continent)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- '4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) > 1.33] <- '4:3'
test$proportions[(test$width / test$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
table(train$proportions)
train$resolution <- 0
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
aggregate(good ~ Continent, data=train, FUN=function(x){sum(x)/length(x)})
prop.table(table(train$proportions, train$good), 1)
prop.table(table(train$Continent, train$good), 1)
tree1 <- rpart(good ~ proportions + Continent + resolution, data=train, method = "anova", control=rpart.control(minsplit=10000, cp=0,99))
fancyRpartPlot(tree1)
Prediction <- predict(tree1, test, type = "class")
Prediction <- predict(tree1, test, type = "anova")
forest2 <- randomForest(as.factor(good) ~ ., data = train, importance=TRUE, ntree=200)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + proportions, data = train, importance=TRUE, ntree=200)
tree1 <- rpart(good ~ proportions + Continent + resolution, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
Prediction <- predict(tree1, test, type = "class")
submit <- data.frame(Id = test$id, good = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
table(submit$good)
prop.table(table(submit$good))
tree1 <- rpart(good ~ proportions + Continent + resolution + size + caption, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ proportions + Continent + resolution + size + caption, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,99, maxdepth = 5))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ proportions + Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ proportions + Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=100, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ proportions + Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "anova", control=rpart.control(minsplit=2000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "anova", control=rpart.control(minsplit=2000, cp=2))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "anova", control=rpart.control(minsplit=2000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "anova", control=rpart.control(minsplit=200, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "anova", control=rpart.control(minsplit=5000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "anova", control=rpart.control(minsplit=15000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=15000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution + size, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution + size, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution + size, data=train, method = "class", control=rpart.control(minsplit=100, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
5
5
5
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=15000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "anova", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=10000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,99))
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ Continent + resolution + size, data=train, method = "class")
#new.tree1 <- prp(tree1,snip=TRUE)$obj
fancyRpartPlot(tree1)
Prediction <- predict(tree1, test, type = "class")
submit <- data.frame(Id = test$id, good = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
table(submit$good)
prop.table(table(submit$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + heigth, data = train, importance=TRUE, ntree=200)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, importance=TRUE, ntree=200)
#forest2 <- randomForest(as.factor(good) ~ ., data = train, importance=TRUE, ntree=200)
important(forest2)
varImpPlot(forest2)
importance(forest2)
bestmtry <- tuneRF(data$train[-10],data$train$income, ntreeTry=100,
stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
bestmtry <- tuneRF(data$train[-10],data$train$income, ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
bestmtry <- tuneRF(train[-10], train$good, ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
bestmtry <- tuneRF(Continent + resolution + size + latitude + longitude + width + height, train$good, ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
bestmtry <- tuneRF(train[-7:10], train$good, ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
bestmtry <- tuneRF(train[-7, -8], train$good, ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
bestmtry <- tuneRF(train[-7], train$good, ntreeTry=100, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE, dobest=FALSE)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=200)
#forest2 <- randomForest(as.factor(good) ~ ., data = train, importance=TRUE, ntree=200)
importance(forest2)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + width + height, data = train, mtry = 2, importance=TRUE, ntree=200)
importance(forest2)
varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
+ latitude + longitude
+ latitude + longitude
+ latitude + longitude
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=200)
#forest2 <- randomForest(as.factor(good) ~ ., data = train, importance=TRUE, ntree=200)
importance(forest2)
varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 3)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 3)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 3)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100, mtry = 2)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100, mtry = 2)
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 2, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
set.seed(2)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
set.seed(3)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
table(train$proportions)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- '4:3'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) > 1.33] <- '4:3'
test$proportions[(test$width / test$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
table(train$proportions)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) > 1.55] <- '> 3:2'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.33] <- 'or 4:3'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) > 1.45] <- '3:2'
test$proportions[(test$width / test$height) > 1.55] <- '> 3:2'
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
table(train$height)
table(train$width)
train$width[train$width == 0] <- 1
train$height[train$height == 0] <- 1
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) > 1.45] <- '3:2'
train$width[train$width == 0] <- 1
train$height[train$height == 0] <- 1
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) > 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) >= 1.33] <- 'or 4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) >= 1.33] <- 'or 4:3'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
.
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) >= 1.33] <- '4:3'
test$proportions[(test$width / test$height) < 1.33] <- '<4:3'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
test$proportions
prop.table(table(test$proportions))
prop.table(table(test$width))
train$width[train$width = 0] <- 1
train$height[train$height = 0] <- 1
train$width[train$width == 0] <- as.integer(1)
train$height[train$height == 0] <- as.integer(1)
train$proportions[(train$width / train$height) < 1.33] <- '<4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
prop.table(table(test$width))
prop.table(table(test$width))
prop.table(table(test$proportions))
train$resolution <- 0
train$proportions[(train$width / train$height) < 1.33] <- 'ora'
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
test$good <- rep(0, 12000)
prop.table(table(train$good))
train$Continent <- 'Ocean'
train$Continent[train$longitude > -80 & train$longitude < -35 & train$latitude > -55 & train$latitude < 12] <- 'South America'
train$Continent[train$longitude > -115 & train$longitude < -60 & train$latitude > 12 & train$latitude < 30] <- 'Middle America'
train$Continent[train$longitude > -125 & train$longitude < -53 & train$latitude > 30 & train$latitude < 80] <- 'North America'
train$Continent[train$longitude > -168 & train$longitude < -125 & train$latitude > 50 & train$latitude < 72] <- 'South America'
train$Continent[train$longitude >  113 & train$longitude < 168 & train$latitude > -48 & train$latitude < -12] <- 'Australia'
train$Continent[train$longitude > -10 & train$longitude < 40 & train$latitude > 36 & train$latitude < 72] <- 'Europe'
train$Continent[train$longitude > -18 & train$longitude < 35 & train$latitude > 5 & train$latitude < 36] <- 'Africa'
train$Continent[train$longitude > 35 & train$longitude < -50 & train$latitude > 13 & train$latitude < 0] <- 'Africa'
train$Continent[train$longitude > 50 & train$longitude < 10 & train$latitude > -35 & train$latitude < 5] <- 'Africa'
train$Continent[train$longitude > 40 & train$longitude < 145 & train$latitude > 30 & train$latitude < 85] <- 'Asia'
train$Continent[train$longitude > 35 & train$longitude < 125 & train$latitude > 10 & train$latitude < 40] <- 'Asia'
train$Continent[train$longitude > 30 & train$longitude < 85 & train$latitude > -10 & train$latitude < 20] <- 'Asia'
train$Continent[train$longitude > 140 & train$longitude < 180 & train$latitude > 50 & train$latitude < 75] <- 'Asia'
test$Continent <- 'Ocean'
test$Continent[test$longitude > -80 & test$longitude < -35 & test$latitude > -55 & test$latitude < 12] <- 'South America'
test$Continent[test$longitude > -115 & test$longitude < -60 & test$latitude > 12 & test$latitude < 30] <- 'Middle America'
test$Continent[test$longitude > -125 & test$longitude < -53 & test$latitude > 30 & test$latitude < 80] <- 'North America'
test$Continent[test$longitude > -168 & test$longitude < -125 & test$latitude > 50 & test$latitude < 72] <- 'South America'
test$Continent[test$longitude >  113 & test$longitude < 168 & test$latitude > -48 & test$latitude < -12] <- 'Australia'
test$Continent[test$longitude > -18 & test$longitude < 35 & test$latitude > 5 & test$latitude < 36] <- 'Africa'
test$Continent[test$longitude > 50 & test$longitude < 10 & test$latitude > -35 & test$latitude < 5] <- 'Africa'
test$Continent[test$longitude > -10 & test$longitude < 40 & test$latitude > 36 & test$latitude < 72] <- 'Europe'
test$Continent[test$longitude > 40 & test$longitude < 145 & test$latitude > 30 & test$latitude < 85] <- 'Asia'
test$Continent[test$longitude > 35 & test$longitude < -50 & test$latitude > 13 & test$latitude < 0] <- 'Africa'
test$Continent[test$longitude > 35 & test$longitude < 125 & test$latitude > 10 & test$latitude < 40] <- 'Asia'
test$Continent[test$longitude > 30 & test$longitude < 85 & test$latitude > -10 & test$latitude < 20] <- 'Asia'
test$Continent[test$longitude > 140 & test$longitude < 180 & test$latitude > 50 & test$latitude < 75] <- 'Asia'
train$Continent <- factor(train$Continent)
test$Continent <- factor(test$Continent)
train$width[train$width == 0] <- as.integer(1)
train$height[train$height == 0] <- as.integer(1)
train$proportions[(train$width / train$height) < 1.33] <- '< 4:3'
train$proportions[(train$width / train$height) >= 1.33] <- '4:3'
train$proportions[(train$width / train$height) >= 1.45] <- '3:2'
train$proportions[(train$width / train$height) >= 1.55] <- '> 3:2'
test$proportions[(test$width / test$height) < 1.33] <- '< 4:3'
test$proportions[(test$width / test$height) >= 1.33] <- '4:3'
test$proportions[(test$width / test$height) >= 1.45] <- '3:2'
test$proportions[(test$width / test$height) >= 1.55] <- '> 3:2'
train$proportions <- factor(train$proportions)
test$proportions <- factor(test$proportions)
prop.table(table(test$proportions))
train$resolution <- 0
train$resolution <- as.integer(sqrt(train$height^2 + train$width^2))
test$resolution <- as.integer(sqrt(test$height^2 + test$width^2))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size  + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
+ latitude + longitude
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
set.seed(1)
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
library(party)
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(good ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data=train  controls = cforest_unbiased(ntree = 10, mtry = 3))
forest1 <- cforest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data=train, controls = cforest_unbiased(ntree = 10, mtry = 3))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
prop.table(table(submit$good))
set.seed(3)
# Stwórz las drzew decyzyjnych
forest2 <- randomForest(as.factor(good) ~ Continent + resolution + size + latitude + longitude + width + height + proportions, data = train, mtry = 3, importance=TRUE, ntree=100)
# Wypisanie ważności poszczególnych parametrów podczas podejmowania decyzji
importance(forest2)
#varImpPlot(forest2)
# Dokonaj analizy danych na podstawie lasu
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
# Stwórz plik wynikowy
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
aggregate(good ~ Continent, data=train, FUN=function(x){sum(x)/length(x)})
aggregate(good ~ proportions, data=train, FUN=function(x){sum(x)/length(x)})
aggregate(good ~ resolution, data=train, FUN=function(x){sum(x)/length(x)})

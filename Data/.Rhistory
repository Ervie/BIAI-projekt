fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=10, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=50, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=500, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=300, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=200, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=250, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=250, cp=1))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=200, cp=1))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=200, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=500, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,01))
fancyRpartPlot(tree1)
test$good <- Na
test$good <- NA
combi <- rbind(train, test)
View(combi)
combi$name = as.array(combi$name)
combi$name[1]
strsplit(combi$name[1], split='[ ]')
combi$name[1]
strsplit(combi$name[1], split=' ')
combi$name[1]
strsplit(combi$name[1], split=' ')[[1]]
strsplit(combi$name[1], split=' ')[[1]][2]
train$resolution <- sqrt(train$height^2 + train$width^2)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,01))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=1))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=1000, cp=0,99))
tree1 <- rpart(good ~ resolution, data=train, method = "anova", control=rpart.control(minsplit=1000, cp=0,99))
fancyRpartPlot(tree1)
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "anova", control=rpart.control(minsplit=1000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "anova", control=rpart.control(minsplit=2000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2500, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=3000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=5000, cp=0,99))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=5000, cp=0,05))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=5000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,5))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,0))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,9))
fancyRpartPlot(tree1)
tree1 <- rpart(good ~ resolution + width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,9))
fancyRpartPlot(tree1)
View(submit)
setwd("E:/GitHub/BIAI-projek/.Data")
setwd("E:/GitHub/BIAI-projek/Data")
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
# Info o tabeli
str(train)
# Ilość dobrych i złych zdjęć
table(train$good)
# Proporcje dobrych i złych zdjęć
prop.table(table(train$good))
# Dodanie nowej kolumny i wypełnienie zertami
test$good <- rep(0, 12000)
# Stworzenie nowego dataFrame'u na podstawie test.csv
submit <- data.frame(PhotoId = test$id, good = test$good)
# Stworzenie pliku na podstawie submit
write.csv(submit, file="CSV/beginning.csv", row.names = FALSE)
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
# Info o tabeli
str(train)
# Ilość dobrych i złych zdjęć
table(train$good)
# Proporcje dobrych i złych zdjęć
prop.table(table(train$good))
# Dodanie nowej kolumny i wypełnienie zertami
test$good <- rep(0, 12000)
# Stworzenie nowego dataFrame'u na podstawie test.csv
submit <- data.frame(PhotoId = test$id, good = test$good)
# Stworzenie pliku na podstawie submit
write.csv(submit, file="CSV/beginning.csv", row.names = FALSE)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(rpart)
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
# Info o tabeli
str(train)
# Ilość dobrych i złych zdjęć
table(train$good)
# Proporcje dobrych i złych zdjęć
prop.table(table(train$good))
# Dodanie nowej kolumny i wypełnienie zertami
test$good <- rep(0, 12000)
# Stworzenie nowego dataFrame'u na podstawie test.csv
submit <- data.frame(PhotoId = test$id, good = test$good)
# Stworzenie pliku na podstawie submit
write.csv(submit, file="CSV/beginning.csv", row.names = FALSE)
install.packages('party')
library(party)
set.seed(1)
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
prop.table(table(train$good))
prop.table(table(submit$good))
install.packages(ggplot2)
install.packages("randomForest")
library(ggplot2)
library(randomForest)
test$resolution <- rep(0, 12000)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + resolution, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest1, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
set.seed((1))
test$resolution <- sqrt(test$height^2 + test$width^2)
setwd("E:/GitHub/BIAI-projekt/Data")
args=(commandArgs(TRUE))
args=(commandArgs(TRUE))
if(length(args)==0){
print("No arguments supplied.")
}
else
args=(commandArgs(TRUE))
if(length(args)==0){
print("No arguments supplied.")
} else {
myargument <- args[length(args)]
print(myargument)
}
arg1 <- 1
arg2 <- 2
system(paste("test.R",arg1, arg2))
arg1 <- 1
arg2 <- 2
system(paste("test.R",arg1, arg2))
commandArgs <- function() 1:3
source('test.R')
args=(commandArgs())
commandArgs <- function() 1:3
source('test.R')
commandArgs <- function() 1:3
source('test.R')
commandArgs <- function() 1:3
source('test.R')
commandArgs <- function() c(1,2,3,4,5)
View(commandArgs)
View(commandArgs)
source('test.R')
commandArgs <- function() c(1,10,3,4,5)
source('test.R')
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + resolution, data = train, importance=TRUE, ntree=20)
train$resolution <- sqrt(train$height^2 + train$width^2)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + resolution, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest1, test, OOB = TRUE, type = "response")
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
prop.table(table(submit2$good))
random_forest2 <- read.csv("E:/GitHub/BIAI-projekt/Data/CSV/random_forest2.csv")
View(random_forest2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
install.packages('party')
library(party)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
prop.table(table(train$good))
prop.table(table(submit$good))
View(random_forest2)
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
install.packages('party')
library(party)
train$resolution <- sqrt(train$height^2 + train$width^2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
train$resolution <- sqrt(train$height^2 + train$width^2)
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
train$resolution <- sqrt(train$height^2 + train$width^2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
source('setup.R')
install.packages('party')
install.packages("party")
source('setup.R')
install.packages('party')
library(party)
train$resolution <- sqrt(train$height^2 + train$width^2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
submit <- data.frame(Id = test$id, good = random_forest_result)
source('setup.R')
install.packages('randomForest')
library(randomForest)
train$resolution <- sqrt(train$height^2 + train$width^2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
source('setup.R')
install.packages('randomForest')
install.packages("randomForest")
library(randomForest)
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
train$resolution <- sqrt(train$height^2 + train$width^2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
install.packages('party')
library(party)
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
train$resolution <- sqrt(train$height^2 + train$width^2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
#install.packages('party')
library(party)
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
train$resolution <- sqrt(train$height^2 + train$width^2)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + height + width, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + heigth + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
install.packages("randomForest")
install.packages("randomForest")
library(ggplot2)
library(randomForest)
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + heigth + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
#install.packages("randomForest")
#install.packages("randomForest")
#install.packages("randomForest")
#install.packages("randomForest")
#install.packages("randomForest")
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
source('setup')
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
source('setup.R')
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
install.packages("randomForest")
install.packages("randomForest")
source('setup.R')
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
source('setup.R')
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
source('setup.R')
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(RColorBrewer)
library(rpart)
#setwd("E:/Git/BIAI-projekt/Data")
setwd("E:/GitHub/BIAI-projekt/Data")
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
# Info o tabeli
str(train)
# Ilość dobrych i złych zdjęć
table(train$good)
# Proporcje dobrych i złych zdjęć
prop.table(table(train$good))
# Dodanie nowej kolumny i wypełnienie zertami
test$good <- rep(0, 12000)
# Stworzenie nowego dataFrame'u na podstawie test.csv
submit <- data.frame(PhotoId = test$id, good = test$good)
# Stworzenie pliku na podstawie submit
write.csv(submit, file="CSV/beginning.csv", row.names = FALSE)
summary(train$width)
# "Skrypt w skrypcie"
source('test.R')
#arg1 <- 1
#arg2 <- 2
#system(paste("test.R",arg1, arg2))
commandArgs <- function() c(1,10,3,4,5)
source('test.R')
prop.table(table(train$latitude, train$good), 1)
train$y <- ' > 70'
train$y[train$latitude < 70 & train$latitude >= 60] <- '<60,70)'
train$y[train$latitude < 60 & train$latitude >= 50] <- '<50,60)'
train$y[train$latitude < 50 & train$latitude >= 40] <- '<40,50)'
train$y[train$latitude < 40 & train$latitude >= 30] <- '<30,40)'
train$y[train$latitude < 30 & train$latitude >= 20] <- '<20,30)'
train$y[train$latitude < 10 & train$latitude >= 0] <- '<0,10)'
train$y[train$latitude < 0 & train$latitude >= -10] <- '<-10,0)'
train$y[train$latitude < -10 & train$latitude >= -20] <- '<-20,-10)'
train$y[train$latitude < -20 & train$latitude >= -30] <- '<-20,-30)'
train$y[train$latitude < -30 & train$latitude >= -20] <- '<-30,-40)'
train$y[train$latitude < -50 & train$latitude >= -60] <- '<-50,-60)'
train$y[train$latitude < -60 & train$latitude >= -70] <- '<-60,70)'
train$y[train$latitude < -70] <- ' < -70'
#train$Fare2[train$Fare < 10] <- '<10'
train$resolution <- sqrt(train$height^2 + train$width^2)
prop.table(table(train$y, train$good), 1)
aggregate(good ~ y, data=train, FUN=function(x){sum(x)/length(x)})
tree1 <- rpart(good ~ resolution + width + height, data=train, method = "class", control=rpart.control(minsplit=2000, cp=0,9))
fancyRpartPlot(tree1)
#test$good <- NA
#combi <- rbind(train, test)
#combi$name = as.array(combi$name)
#combi$name[1]
#new.tree1 <- prp(tree1,snip=TRUE)$obj
library(rpart.plot)
train$y[train$latitude < -40 & train$latitude >= -50] <- '<-40,-50)'
train$y[train$latitude < 20 & train$latitude >= 10] <- '<10,20)'
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
#strsplit(combi$name[1], split=' ')[[1]][2]
set.seed(1)
#forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
#random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
#submit <- data.frame(Id = test$id, good = random_forest_result)
#write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
prop.table(table(train$good))
#prop.table(table(submit$good))
library(ggplot2)
#library(randomForest)
test$resolution <- rep(0, 12000)
test$resolution <- sqrt(test$height^2 + test$width^2)
#forest2 <- randomForest(as.factor(good) ~ latitude + longitude + resolution, data = train, importance=TRUE, ntree=20)
#random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
#submit2 <- data.frame(Id = test$id, good = random_forest_result2)
#write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
#prop.table(table(submit2$good))
install.packages(ggplot2)
#install.packages('party')
set.seed((1))
#install.packages("randomForest")
#library(party)
source('E:/GitHub/BIAI-projekt/Data/Forest1.R')
setwd("E:/GitHub/BIAI-projekt/Data")
train <- read.csv("CSV/training.csv", stringsAsFactors = FALSE)
test <- read.csv("CSV/test.csv", stringsAsFactors = FALSE)
source('setup.R')
library(randomForest)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + height + width, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
install.packages('party')
library(party)
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + resolution, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
install.packages('party')
#library(party)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + width + heigth, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
install.packages("party")
library(party)
source('setup.R')
set.seed(1)
forest1 <- cforest(as.factor(good) ~ latitude + longitude + width + height, data = train, controls = cforest_unbiased(ntree = 10, mtry = 2))
random_forest_result <- predict(forest1, test, OOB = TRUE, type = "response")
submit <- data.frame(Id = test$id, good = random_forest_result)
write.csv(submit, file = "CSV/random_forest.csv", row.names = FALSE)
library(randomForest)
source('setup.R')
set.seed(1)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
install.packages(randomForest)
library(randomForest)
install.packages("randomForest")
library(randomForest)
source('setup.R')
set.seed(1)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
library(randomForest)
source('setup.R')
set.seed(1)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=20)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit, file = "CSV/random_forest2.csv", row.names = FALSE)
library(randomForest)
source('setup.R')
set.seed(1)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=500)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=1)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=1)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
library(randomForest)
source('setup.R')
args=(commandArgs())
treeNumber <-  args[1]
sink(file = "output.txt")
cat(treeNumber)
sink()
set.seed(1)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=1)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
library(randomForest)
source('setup.R')
args=(commandArgs())
treeNumber <-  args[1]
sink(file = "output.txt")
cat(treeNumber)
sink()
set.seed(1)
forest2 <- randomForest(as.factor(good) ~ latitude + longitude + width + height, data = train, importance=TRUE, ntree=100)
random_forest_result2 <- predict(forest2, test, OOB = TRUE, type = "response")
submit2 <- data.frame(Id = test$id, good = random_forest_result2)
write.csv(submit2, file = "CSV/random_forest2.csv", row.names = FALSE)
